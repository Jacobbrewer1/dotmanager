# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: "Create Release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'What release version should be created?'
        required: true
        type: choice
        default: 'patch'
        options:
          - 'patch'
          - 'minor'
          - 'major'

concurrency:
  group: 'create-release'
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  discussions: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v6
        with:
          go-version: ${{ vars.GO_VERSION }}
          cache-dependency-path: "**/*.sum"

      - name: Create Tag
        id: tag
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            
            // Get the latest tag
            let latestTag;
            try {
              latestTag = execSync('git describe --tags --abbrev=0', { encoding: 'utf8' }).trim();
            } catch (error) {
              // If no tags exist, start with v0.0.0
              latestTag = 'v0.0.0';
            }
            
            console.log(`Latest tag: ${latestTag}`);
            
            // Parse version numbers (remove 'v' prefix)
            const version = latestTag.replace(/^v/, '');
            const [major, minor, patch] = version.split('.').map(Number);
            
            // Determine new version based on input
            const releaseType = '${{ github.event.inputs.version }}';
            let newMajor = major;
            let newMinor = minor;
            let newPatch = patch;
            
            switch (releaseType) {
              case 'major':
                newMajor += 1;
                newMinor = 0;
                newPatch = 0;
                break;
              case 'minor':
                newMinor += 1;
                newPatch = 0;
                break;
              case 'patch':
                newPatch += 1;
                break;
              default:
                throw new Error(`Invalid release type: ${releaseType}`);
            }
            
            const newTag = `v${newMajor}.${newMinor}.${newPatch}`;
            console.log(`Creating new tag: ${newTag}`);
            
            // Create and push the new tag
            execSync(`git tag ${newTag}`, { encoding: 'utf8' });
            execSync(`git push origin ${newTag}`, { encoding: 'utf8' });
            
            // Set output for use in other steps
            core.setOutput('tag', newTag);
            core.setOutput('version', `${newMajor}.${newMinor}.${newPatch}`);
            
            return newTag;

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          # 'latest', 'nightly', or a semver
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
