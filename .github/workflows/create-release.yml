# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: "Create Release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'What release version should be created?'
        required: true
        type: choice
        default: 'patch'
        options:
          - 'patch'
          - 'minor'
          - 'major'
      snapshot:
        description: 'Create a snapshot (pre-release) instead of a full release'
        required: false
        type: boolean
        default: false

concurrency:
  group: 'create-release'
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  discussions: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v6
        with:
          go-version: ${{ vars.GO_VERSION }}
          cache-dependency-path: "**/*.sum"

      - name: Create Tag
        id: tag
        run: |
          set -euo pipefail
          TYPE='${{ github.event.inputs.version }}'
          # Find latest tag matching v* (semantic version) or default to v0.0.0
          LATEST_TAG=$(git tag --list 'v*' --sort=-version:refname | head -n1 || true)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "Latest tag: $LATEST_TAG"
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          case "$TYPE" in
            major)
              MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor)
              MINOR=$((MINOR+1)); PATCH=0 ;;
            patch)
              PATCH=$((PATCH+1)) ;;
            *) echo "Invalid version bump type: $TYPE" >&2; exit 1 ;;
          esac
          NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New tag: $NEW_TAG"
          # Create annotated tag and push
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"
          echo "tag=$NEW_TAG" >> "$GITHUB_OUTPUT"

      - name: Generate Release Args
        id: release-args
        run: |
          args=""
          if [ "${{ github.event.inputs.snapshot }}" = "true" ]; then 
            args="--snapshot"
          fi

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release ${{ steps.release-args.outputs.args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
